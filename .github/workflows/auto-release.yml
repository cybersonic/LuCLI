name: Auto Release from POM Version

on:
  push:
    branches: [ main ]
    paths: [ 'pom.xml', 'src/**' ]
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      version: ${{ steps.version-check.outputs.version }}
      tag-exists: ${{ steps.tag-check.outputs.exists }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tag checking

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Extract version from pom.xml
      id: version-check
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        if [[ "$VERSION" != *"-SNAPSHOT" ]]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "Found release version: $VERSION"
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "Found SNAPSHOT version: $VERSION - skipping release"
        fi

    - name: Check if tag already exists
      id: tag-check
      run: |
        VERSION="${{ steps.version-check.outputs.version }}"
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag v$VERSION already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag v$VERSION does not exist"
        fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true' && needs.check-version.outputs.tag-exists == 'false'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn clean package -Pbinary

    - name: Prepare artifacts (Unix)
      if: runner.os != 'Windows'
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        mkdir -p release-artifacts
        
        # Copy main JAR
        cp target/lucli.jar release-artifacts/lucli-$VERSION.jar
        
        # Copy Unix binary
        if [ -f target/lucli ]; then
          cp target/lucli release-artifacts/lucli-$VERSION-${{ runner.os }}
          chmod +x release-artifacts/lucli-$VERSION-${{ runner.os }}
        fi

    - name: Prepare artifacts (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        mkdir -p release-artifacts
        
        # Copy main JAR
        cp target/lucli.jar release-artifacts/lucli-$VERSION.jar
        
        # Create Windows batch file
        cat > release-artifacts/lucli-$VERSION.bat << 'EOF'
        @echo off
        setlocal
        set SCRIPT_DIR=%~dp0
        java -jar "%SCRIPT_DIR%lucli.jar" %*
        EOF
        
        # Create PowerShell script
        cat > release-artifacts/lucli-$VERSION.ps1 << 'EOF'
        #!/usr/bin/env pwsh
        $scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
        $jarPath = Join-Path $scriptDir "lucli.jar"
        & java -jar $jarPath $args
        EOF

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lucli-${{ needs.check-version.outputs.version }}-${{ matrix.os }}
        path: release-artifacts/
        retention-days: 30

  build-docker:
    needs: [check-version, build-and-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ubuntu-latest-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ubuntu-latest-m2

    - name: Build artifacts for Docker
      run: mvn clean package -Pbinary

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: markdrew/lucli
        tags: |
          type=raw,value=${{ needs.check-version.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Test Docker image
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        docker run --rm markdrew/lucli:$VERSION --version

  create-release:
    needs: [check-version, build-and-release, build-docker]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: Prepare release assets
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        mkdir -p final-release-assets
        
        # Collect all artifacts
        find all-artifacts -name "*.jar" -exec cp {} final-release-assets/ \;
        find all-artifacts -name "lucli-*" -exec cp {} final-release-assets/ \;
        find all-artifacts -name "*.bat" -exec cp {} final-release-assets/ \;
        find all-artifacts -name "*.ps1" -exec cp {} final-release-assets/ \;
        
        # Create a unified JAR (just copy one of them and rename)
        if [ -f "final-release-assets/lucli-$VERSION.jar" ]; then
          cp "final-release-assets/lucli-$VERSION.jar" final-release-assets/lucli.jar
        fi
        
        # Create installation script
        cat > final-release-assets/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        VERSION="${{ needs.check-version.outputs.version }}"
        INSTALL_DIR="${LUCLI_HOME:-$HOME/.local/bin}"
        
        echo "Installing LuCLI $VERSION to $INSTALL_DIR"
        
        # Create directory if it doesn't exist
        mkdir -p "$INSTALL_DIR"
        
        # Download and install
        OS=$(uname -s)
        case $OS in
          Darwin)
            BINARY_NAME="lucli-$VERSION-macOS"
            ;;
          Linux)
            BINARY_NAME="lucli-$VERSION-Linux"
            ;;
          *)
            echo "Unsupported OS: $OS"
            echo "Please download the appropriate binary manually"
            exit 1
            ;;
        esac
        
        # If binary exists, use it; otherwise use JAR
        if command -v curl >/dev/null 2>&1; then
          DOWNLOAD_CMD="curl -L"
        elif command -v wget >/dev/null 2>&1; then
          DOWNLOAD_CMD="wget -O"
        else
          echo "Neither curl nor wget found. Please install one of them."
          exit 1
        fi
        
        BASE_URL="https://github.com/${{ github.repository }}/releases/download/v$VERSION"
        
        # Try to download binary first, fallback to JAR
        if $DOWNLOAD_CMD "$INSTALL_DIR/lucli" "$BASE_URL/$BINARY_NAME" 2>/dev/null; then
          chmod +x "$INSTALL_DIR/lucli"
          echo "Binary installed successfully"
        else
          $DOWNLOAD_CMD "$INSTALL_DIR/lucli.jar" "$BASE_URL/lucli.jar"
          
          # Create wrapper script
          cat > "$INSTALL_DIR/lucli" << 'WRAPPER'
        #!/bin/bash
        SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        java -jar "$SCRIPT_DIR/lucli.jar" "$@"
        WRAPPER
          chmod +x "$INSTALL_DIR/lucli"
          echo "JAR with wrapper script installed successfully"
        fi
        
        echo ""
        echo "LuCLI $VERSION installed to $INSTALL_DIR"
        echo "Make sure $INSTALL_DIR is in your PATH"
        echo ""
        echo "Run 'lucli --help' to get started"
        EOF
        
        chmod +x final-release-assets/install.sh
        
        # List all files for debugging
        echo "Release assets prepared:"
        ls -la final-release-assets/

    - name: Create Git tag
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        
        # Get commits since last tag
        LAST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n 2 | tail -n 1)
        if [ -z "$LAST_TAG" ]; then
          LAST_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        
        cat > CHANGELOG.md << EOF
        ## What's Changed
        
        $CHANGELOG
        
        ## Binary Downloads
        
        Choose the appropriate download for your platform:
        
        ### Cross-Platform (Requires Java 17+)
        - **lucli.jar** - Universal JAR file, works on any platform with Java
        
        ### Platform-Specific Binaries
        - **lucli-$VERSION-Linux** - Native Linux binary  
        - **lucli-$VERSION-macOS** - Native macOS binary
        - **lucli-$VERSION.bat** - Windows batch script (requires lucli.jar)
        - **lucli-$VERSION.ps1** - Windows PowerShell script (requires lucli.jar)
        
        ### Installation Scripts
        - **install.sh** - Automated installation script for Linux/macOS
        
        ## Quick Install
        
        ### Linux/macOS (One-liner)
        \`\`\`bash
        curl -L https://github.com/${{ github.repository }}/releases/download/v$VERSION/install.sh | bash
        \`\`\`
        
        ### Manual Installation
        1. Download the appropriate binary for your platform
        2. Make it executable: \`chmod +x lucli-$VERSION-Linux\` (Linux) or \`chmod +x lucli-$VERSION-macOS\` (macOS)
        3. Move to a directory in your PATH: \`mv lucli-$VERSION-Linux /usr/local/bin/lucli\`
        
        ### Using JAR directly
        \`\`\`bash
        java -jar lucli.jar --help
        \`\`\`
        
        ## System Requirements
        - Java 17 or higher (for JAR usage)
        - No Java required for native binaries
        EOF

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-version.outputs.version }}
        name: LuCLI v${{ needs.check-version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: final-release-assets/*

  notify-release:
    needs: [check-version, create-release]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Release notification
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        echo "🎉 Successfully created release v$VERSION"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
