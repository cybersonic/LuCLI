name: Build and Release LuCLI

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        java: [17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn clean compile test package

    - name: Build binary (Unix)
      if: runner.os != 'Windows'
      run: mvn package -Pbinary

    - name: Build binary (Windows)
      if: runner.os == 'Windows'
      run: |
        # Create Windows batch file for binary
        if (!(Test-Path target)) { New-Item -ItemType Directory -Path target }
        echo '@echo off' > target/lucli.bat
        echo 'java -jar "%~dp0lucli.jar" %*' >> target/lucli.bat

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lucli-${{ matrix.os }}
        path: |
          target/lucli.jar
          target/lucli*
        retention-days: 30

    - name: Run tests
      run: mvn test

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ubuntu-latest-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ubuntu-latest-m2

    - name: Build release artifacts
      run: |
        mvn clean package -Pbinary
        
        # Create additional platform-specific binaries
        mkdir -p release-artifacts
        
        # Copy the main JAR
        cp target/lucli.jar release-artifacts/
        
        # Copy the Unix binary
        cp target/lucli release-artifacts/lucli-unix
        
        # Create Windows batch file
        cat > release-artifacts/lucli.bat << 'EOF'
        @echo off
        setlocal
        set SCRIPT_DIR=%~dp0
        java -jar "%SCRIPT_DIR%lucli.jar" %*
        EOF
        
        # Create PowerShell script for Windows
        cat > release-artifacts/lucli.ps1 << 'EOF'
        #!/usr/bin/env pwsh
        $scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
        $jarPath = Join-Path $scriptDir "lucli.jar"
        & java -jar $jarPath $args
        EOF
        
        # Create installation script for Unix
        cat > release-artifacts/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Default installation directory
        INSTALL_DIR="${LUCLI_HOME:-$HOME/.local/bin}"
        
        # Create directory if it doesn't exist
        mkdir -p "$INSTALL_DIR"
        
        # Copy files
        cp lucli.jar "$INSTALL_DIR/"
        cp lucli-unix "$INSTALL_DIR/lucli"
        chmod +x "$INSTALL_DIR/lucli"
        
        echo "LuCLI installed to $INSTALL_DIR"
        echo "Make sure $INSTALL_DIR is in your PATH"
        echo ""
        echo "Run 'lucli --help' to get started"
        EOF
        
        chmod +x release-artifacts/install.sh
        chmod +x release-artifacts/lucli-unix

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: LuCLI ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## LuCLI Release ${{ steps.get_version.outputs.VERSION }}
          
          ### Downloads
          - **lucli.jar** - Cross-platform JAR file (requires Java 17+)
          - **lucli-unix** - Self-contained executable for Linux/macOS
          - **lucli.bat** - Windows batch file (requires lucli.jar)
          - **lucli.ps1** - Windows PowerShell script (requires lucli.jar)
          - **install.sh** - Unix installation script
          
          ### Installation
          
          #### Quick Install (Linux/macOS)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/install.sh | bash
          ```
          
          #### Manual Installation
          1. Download `lucli.jar` and the appropriate binary for your platform
          2. Make the binary executable: `chmod +x lucli-unix` (Unix) 
          3. Add to your PATH or use directly
          
          #### Using the JAR directly
          ```bash
          java -jar lucli.jar --help
          ```
          
          ### What's Changed
          - Built with Java 17
          - Includes Lucee ${{ steps.get_version.outputs.VERSION }}
          - Cross-platform support
          
        draft: false
        prerelease: false

    - name: Upload JAR to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/lucli.jar
        asset_name: lucli.jar
        asset_content_type: application/java-archive

    - name: Upload Unix Binary to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/lucli-unix
        asset_name: lucli-unix
        asset_content_type: application/octet-stream

    - name: Upload Windows Batch to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/lucli.bat
        asset_name: lucli.bat
        asset_content_type: text/plain

    - name: Upload Windows PowerShell to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/lucli.ps1
        asset_name: lucli.ps1
        asset_content_type: text/plain

    - name: Upload Install Script to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/install.sh
        asset_name: install.sh
        asset_content_type: text/plain
